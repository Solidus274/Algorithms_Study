# Задание. Подсчитать, сколько было выделено памяти под переменные
# в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Python 3.7.
# PyCharm 2019.3.1 (Community Edition)
# Windows 10 10.0 64-bit.

# За испытуемого возмем 1 задание урока 3.
# Значение x принимаем равное 10

# Алгоритм №3: (404 байта) По обьему занятой памяти оптимальнее всех так как оперирует целыми числами
# и перезаписывает значение переменной num при каждом шаге цикла.
# В результате объем занятой переменной num памяти составляет всего 14 байт.
# Алгоритм №1: (572 байта) Занимает больше места за счет использования списка.
# Сам список занимает 68 байт, и каждый элемент списка, являющийся целым числом, занимает по 14 байт
# Алгоритм №2: (928 байт) Самый затратный, так как использует словарь и списки.
# В разультате сам словарь занимает 204 байта,
# значения словаря - списки, по 52, и каждое число,
# как ключ словаря, так и составляющие списков занимают по 14 байт


import sys
print('*' * 50)


def natural_1(x):
    weight = 0
    num = [0] * 8
    weight += sys.getsizeof(num)
    for i in range(2, x):
        for j in range(2, 10):
            if i % j == 0:
                num[j - 2] += 1
                weight += sys.getsizeof(i)
                weight += sys.getsizeof(j)
    for item in num:
        weight += sys.getsizeof(item)
    print(f'Переменные алгоритма {sys._getframe().f_code.co_name} занимают в памяти {weight} байт')
    return '*' * 50

def natural_2(x):
    weight = 0
    num = {}
    weight += sys.getsizeof(num)
    for n in range(2, 10):
        num[n] = []
        weight += sys.getsizeof(num[n])
        weight += sys.getsizeof(n)
        for f in range(2, x):
            if f % n == 0:
                num[n].append(f)
                weight += sys.getsizeof(f)
                weight += sys.getsizeof(n)
    print(f'Переменные алгоритма {sys._getframe().f_code.co_name} занимают в памяти {weight} байт')
    return '*' * 50

def natural_3(x):
    weight = 0
    num = 0
    weight += sys.getsizeof(num)
    for i in range(2, 10):
        for j in range(2, x):
            if j % i == 0:
                num += 1
                weight += sys.getsizeof(i)
                weight += sys.getsizeof(j)
    print(f'Переменные алгоритма {sys._getframe().f_code.co_name} занимают в памяти {weight} байт')
    return '*' * 50

print(natural_1(10))
print(natural_2(10))
print(natural_3(10))

# **************************************************
# Переменные алгоритма natural_1 занимают в памяти 572 байт
# **************************************************
# Переменные алгоритма natural_2 занимают в памяти 928 байт
# **************************************************
# Переменные алгоритма natural_3 занимают в памяти 404 байт
# **************************************************
